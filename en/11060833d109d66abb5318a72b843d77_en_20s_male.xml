<author lang="en" gender="male" age_group="20s">	<conversations count="3">		<conversation id="b1c01bfb4fc003080a6502b27b5ccee">			This is a programming language that uses nnemonics rather than binary digits in its representation. Symbolic are used rather machine instruction. For instance LDA 5 can be used in place of 000000000001. The symbolic low-level language must be translated into machine language before use, becos although easier to work with by the programmer it is not usable as a program called assembler that translates assembly into machine codes. It is  machine independent. There are practical course available in development of assembly language. Infact, there exist one-to-one relationship between assembly language &amp; machine language.		</conversation>		<conversation id="b0805a1bea0669c4ef703da52931cb1c">			This is a programming language in which instructions are in a form that allows the computer to perform immediately, without any further translation being required. Instruction in machine language are in the form of binary code, also called binary digits I.e. 0's and 1's machine instruction corresponds directly to a hardware facility on the machine for which it is written. Writing program using this language tedious, time consuming and somewhat impractical.		</conversation>		<conversation id="ec99bfd893e95f8556a7c223b3a1cc75">			Programming Language is a set of specialized notation for communicatiom with computer. It is intermediate language device to allow people communicate with computers. Since a computer must be programmed respond to specific instructions, programming languages standardize instruction process. Its characteristics are syntax and semantics.		</conversation>	</conversations></author>